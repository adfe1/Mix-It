---
import MixItLayout from "../layouts/MixIt-Layout.astro";
import fs from "fs/promises";

let searchQuery = "";
let results = [];

if (Astro.request.method === "POST") {
    const bodyText = await Astro.request.text();
    const params = new URLSearchParams(bodyText);
    searchQuery = params.get("search") ?? "";

    if (searchQuery) {
        const res = await fetch(`http://localhost:8080/cocktails?query=${encodeURIComponent(searchQuery)}`);
        const data = await res.json();
        results = data.drinks ?? [];

        try {
            await fs.writeFile(new URL("../data.json", import.meta.url), JSON.stringify(results, null, 1));
            console.log("Datei erfolgreich geschrieben!");
        } catch (err) {
            console.error("Fehler beim Schreiben:", err);
        }
    }
}

const { default: data } = await import('../data.json');
---
<MixItLayout title="Search" description="Suche nach Cocktails">
    <main>
        <div class="container">
            <div class="categories">
                <h4>Kategorien</h4>
                <p>Non-Alcoholic <input type="checkbox" name="category" value="Non_Alcoholic" /></p>
                <p>Ordinary Drink <input type="checkbox" name="category" value="Ordinary_Drink" /></p>
                <p>Cocktail Drink <input type="checkbox" name="category" value="Cocktail_Drink" /></p>
                <p>Cocktail Glass <input type="checkbox" name="category" value="Cocktail_Glass" /></p>
                <p>Champagne Glass <input type="checkbox" name="category" value="Champagne_Glass" /></p>
            </div>

            <div class="Search_Bar">
                <form method="post">
                    <input id="searchInput" type="text" name="search" placeholder="Suche nach Cocktails..." value={searchQuery} />
                    <button type="submit" title="Search">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
                            <path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                  d="m21 21l-4.343-4.343m0 0A8 8 0 1 0 5.343 5.343a8 8 0 0 0 11.314 11.314"/>
                        </svg>
                    </button>
                </form>

                <div id="results">
                    {data.drinks.map(item => (
                            <div class="card" data-title={item.strDrink.toLowerCase()}>
                                <h3>{item.strDrink}</h3>
                                <img src={item.strDrinkThumb} width="600px" height="600px" />
                                <p>{item.strGlass}</p>
                                <p>{item.strInstructions}</p>
                                {[...Array(15)].map((_, i) => {
                                    const ingredient = item[`strIngredient${i + 1}`];
                                    const measure = item[`strMeasure${i + 1}`];
                                    return ingredient ? <p>{ingredient} {measure}</p> : null;
                                })}
                            </div>
                    ))}
                </div>
            </div>
        </div>

        <script type="module">
            function filterResults() {
                const input = document.getElementById("searchInput").value.toLowerCase();
                const cards = document.querySelectorAll("#results .card");

                cards.forEach(card => {
                    const title = card.dataset.title;
                    card.style.display = title.includes(input) ? "block" : "none";
                });
            }

            document.getElementById("searchInput")?.addEventListener("input", filterResults);
        </script>
    </main>

    <style>
        .container {
            padding: 20px;
            display: flex;
            flex-wrap: wrap;
            gap: 2rem;
        }

        .categories {
            flex: 1;
            max-width: 300px;
            margin-top: 4rem;
            padding: 2rem;
            border-radius: 18px;
            background: #f8fafc;
            border: 2px solid #e2e8f0;
            box-shadow: 0 6px 24px rgba(0, 0, 0, 0.1);
            text-align: center;
        }

        .Search_Bar {
            flex: 2;
            max-width: 800px;
            margin-top: 4rem;
            padding: 2rem;
            border-radius: 18px;
            background: #f8fafc;
            border: 2px solid #e2e8f0;
            box-shadow: 0 6px 24px rgba(0, 0, 0, 0.1);
        }

        .Search_Bar form {
            width: 100%;
            display: flex;
            gap: 1rem;
        }

        .Search_Bar input {
            flex: 2;
            padding: 0.7rem 1rem;
            font-size: 1.1rem;
            border-radius: 10px;
            border: 1.5px solid #bfc9d1;
        }

        .Search_Bar button {
            padding: 0.7rem 1rem;
            background: #5a77e2;
            color: white;
            border: none;
            border-radius: 10px;
            cursor: pointer;
        }

        #results {
            margin-top: 2rem;
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 1.5rem;
        }

        .card {
            border: 1px solid #ccc;
            border-radius: 8px;
            padding: 1rem;
            background: white;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
        }

        .card img {
            width: 100%;
            border-radius: 10px;
            margin: 1rem 0;
        }
    </style>
</MixItLayout>
