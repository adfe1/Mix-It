---
import MixItLayout from "../layouts/MixIt-Layout.astro";

let searchQuery = "";
let results = { drinks: [] };

searchQuery = Astro.url.searchParams.get("search") ?? "";

if (searchQuery) {
    try {
        const res = await fetch(`http://localhost:8080/api/auth/cocktails?querry=${encodeURIComponent(searchQuery)}`, {
            headers: {
                "Authorization": "1NmEMBLbz0BXjeZ1SW1C"
            }
        });

        if (!res.ok) {
            throw new Error(`API responded with status ${res.status}`);
        }

        const data = await res.json();
        results = data ?? { drinks: [] };
    } catch (error) {
        console.error("Error fetching search results:", error);
        results = { drinks: [] };
    }
}

---

<MixItLayout title="Search" description="Search for Cocktails">
    <main>
        <div class="Search_Bar">
            <form method="get">
                <input id="searchInput" type="text" name="search" placeholder="search for Cocktails..." value={searchQuery} />
                <button type="submit" title="Search">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
                        <path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                              d="m21 21l-4.343-4.343m0 0A8 8 0 1 0 5.343 5.343a8 8 0 0 0 11.314 11.314" />
                    </svg>
                </button>
            </form>

            <div id="results">
                {results.drinks && results.drinks.length > 0 ? (
                    results.drinks.map(item => (
                            <div class="card" data-title={item.strDrink.toLowerCase()}>
                                <h3>{item.strDrink}</h3>
                                <img src={item.strDrinkThumb} width="600px" height="600px" />
                                <p>{item.strGlass}</p>
                                <p>{item.strInstructions}</p>
                                {[...Array(15)].map((_, i) => {
                                    const ingredient = item[`strIngredient${i + 1}`];
                                    const measure = item[`strMeasure${i + 1}`];
                                    return ingredient ? <p>{ingredient} {measure}</p> : null;
                                })}
                                <button type="button" class="save-button" value={item.idDrink}>Save</button>
                            </div>
                    ))
                ) : (
                        <span>Drink does not exist in database</span>
                )}
            </div>
        </div>

        <script type="module">
            document.addEventListener('DOMContentLoaded', () => {
                document.querySelectorAll('.save-button').forEach(button => {
                    button.addEventListener('click', async (event) => {
                        const drinkId = event.target.dataset.id;
                        const token = localStorage.getItem("authToken"); // Token aus localStorage

                        if (!token) {
                            alert("Bitte zuerst einloggen!");
                            return;
                        }

                        try {
                            const response = await fetch("http://localhost:8080/api/save/add", {
                                method: "POST",
                                headers: {
                                    "Content-Type": "application/json",
                                    "Authorization": `Bearer ${token}`
                                },
                                body: JSON.stringify({ idDrink: drinkId })
                            });

                            if (response.ok) {
                                alert("Drink gespeichert!");
                            } else {
                                alert("Fehler beim Speichern.");
                            }
                        } catch (error) {
                            console.error("Fehler beim Speichern:", error);
                            alert("Fehler beim Speichern.");
                        }
                    });
                });
            });
        </script>

    </main>
</MixItLayout>

<style>
        .container {
            padding: 20px;
            display: flex;
            flex-wrap: wrap;
            gap: 2rem;
        }


        .Search_Bar {
            flex: 2;
            max-width: 800px;
            margin-top: 4rem;
            padding: 2rem;
            border-radius: 18px;
            background: #f8fafc;
            border: 2px solid #e2e8f0;
            box-shadow: 0 6px 24px rgba(0, 0, 0, 0.1);
        }

        .Search_Bar form {
            width: 100%;
            display: flex;
            gap: 1rem;
        }

        .Search_Bar input {
            flex: 2;
            padding: 0.7rem 1rem;
            font-size: 1.1rem;
            border-radius: 10px;
            border: 1.5px solid #bfc9d1;
        }

        .Search_Bar button {
            padding: 0.7rem 1rem;
            background: #5a77e2;
            color: white;
            border: none;
            border-radius: 10px;
            cursor: pointer;
        }

        #results {
            margin-top: 2rem;
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 1.5rem;
        }

        .card {
            border: 1px solid #ccc;
            border-radius: 8px;
            padding: 1rem;
            background: white;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
        }

        .card img {
            width: 100%;
            border-radius: 10px;
            margin: 1rem 0;
        }
    </style>
</MixItLayout>
